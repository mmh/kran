#!/bin/bash
VERSION="0.1.7"
# Load configuration
source ~/.kran/kran.conf

function kran_logo(){
  cat <<EOF
  Λ
 |X|_______
 |X X_X_X_X'                What else would you
 |X|    _ ¿_                use to handle your
 |X| __| '__|_  _ ___       containers?
 |X|/ /| |/   \| '__ |
 |X| < |_| (_) | | | |      v. $VERSION
 |X|\_\   \__|_|_| |_|

EOF
}

function kran_usage(){
  cat <<EOF
usage `basename $0`
    up - start container
    build - build docker containers
    ssh - connect to container
    clean - kill all containers, and remove them
    init-site [name] - initialize site

EOF
}

# find relative directory
PWD=$(pwd)
WD=${PWD/$LOCAL_SITES/}
DIR=${WD#*/}
#find site from path
IFS='/' read -ra ADDR <<< "$WD"
SITE=${ADDR[0]}

ARCH=$(uname)

if [ "$ARCH" == "Darwin" ]; then
  export DOCKER_HOST=tcp://localhost:4243
fi

function print_params(){
  echo "SITE=$SITE"
  echo "DIR=$DIR"
}

function init(){
  if [[ -z $SITE ]]; then
    echo "Couldn't determine site, correct directory?";
    exit 1;
  fi

  source $LOCAL_SITES$SITE/ports
}

function start(){
  if [[ -f "$LOCAL_SITES$SITE/config" ]]; then 
    source $LOCAL_SITES$SITE/config
  fi

  # Run mailcatcher
  if [ "$ARCH" == "Darwin" ]; then
    mailcatcher --smtp-ip 192.168.33.1
  else
    mailcatcher --smtp-ip 172.17.42.1
  fi

  echo ""
  echo "Running docker with site: $SITE"
  echo -e "==> http://localhost:"$HTTP
  echo -e "==> ssh root@localhost -p "$SSH
  echo ""

  # Check if were running on a mac. If we are, we keep mysql
  # in the vagrant box.
  if [ "$ARCH" == "Darwin" ]; then
    PARAMS="run --rm -t -i -p $HTTP:80 -p $SSH:22 --dns 8.8.8.8\
      -v $SITES$SITE/www:/var/www\
      -v $SITES$SITE/vhost:/etc/apache2/sites-enabled\
      -v /mnt/sda/lib/$SITE/mysql:/var/lib/mysql\
     $IMAGE /opt/start.sh"

  else
    PARAMS="run --rm -t -i -p $HTTP:80 -p $SSH:22 --dns 8.8.8.8\
      -v $SITES$SITE/www:/var/www\
      -v $SITES$SITE/vhost:/etc/apache2/sites-enabled\
      -v $SITES$SITE/mysql:/var/lib/mysql\
     $IMAGE /opt/start.sh"
  fi
  # Run docker, map directories
  docker $PARAMS
}

function build(){
  if [ -d "~/.kran/images/$2" ]; then
      cat ~/.ssh/id_rsa.pub > ~/.kran/images/$2/adds/id_rsa.pub;
      cd ~/.kran/images/$2; docker build --rm -t="kran/$2" .;
    exit;
  fi

  for D in `find ~/.kran/images/* -type d -maxdepth 0`
    do
      IMAGE_NAME=`basename $D`
      cat ~/.ssh/id_rsa.pub > $D/adds/id_rsa.pub;
      cd $D; docker build --rm -t="kran/$IMAGE_NAME" .;
    done
}

function connect_ssh(){
  ARGS="${@:2}"
  echo "Connecting to container via ssh"

  # Remove the old entry for known_hosts (changes on each build)
  ssh-keygen -f "~/.ssh/known_hosts" -R [localhost]:$SSH > /dev/null 2>&1
 
  if [[ -z $ARGS ]]; then 
    # Dont store knownhosts, dont check
    ssh -o 'UserKnownHostsFile /dev/null' -o 'StrictHostKeyChecking no' -o 'LogLevel=quiet' root@localhost -p $SSH

  else

    ssh -n -o 'UserKnownHostsFile /dev/null' -o 'StrictHostKeyChecking no' -o 'LogLevel=quiet' root@localhost -p $SSH "$ARGS"
  fi
}

function copy_ssh(){
  scp -o 'UserKnownHostsFile /dev/null' -o 'StrictHostKeyChecking no' -o 'LogLevel=quiet' -P $SSH $2 root@localhost:$3
}

function initalize_site(){
  if [[ -d "$LOCAL_SITES$2" ]]; then
    echo "Site already exists?"
  else
    echo "Initialize site $2"
    echo $LOCAL_SITES$2

    # Create site folders.
    mkdir -p $LOCAL_SITES$2/www
    mkdir -p $LOCAL_SITES$2/www/public_html
    mkdir -p $LOCAL_SITES$2/www/tmp
    mkdir -p $LOCAL_SITES$2/www/logs
    mkdir -p $LOCAL_SITES$2/tmp
    mkdir -p $LOCAL_SITES$2/mysql
    mkdir -p $LOCAL_SITES$2/vhost

    # Add default vhost.
    cp ~/.kran/vhost/000-default $LOCAL_SITES$2/vhost/000-default

    # Get latest port.
    source ~/.kran/port.conf

    # Calculate new ports for container and port config.
    NEWPORT=$[PORT+2]
    HTTPPORT=$[PORT+1]
    SSHPORT=$[PORT+2]

    echo "PORT="$NEWPORT > ~/.kran/port.conf
    echo "HTTP="$HTTPPORT > $LOCAL_SITES$2/ports
    echo "SSH="$SSHPORT >> $LOCAL_SITES$2/ports

    # Fire up container and initialize site with db.
    # Check if were running on a mac. If we are, we keep mysql
    # in the vagrant box.
    if [ "$ARCH" == "Darwin" ]; then
      PARAMS="run --rm -t -i -p 10900:80 -p 10901:22 --dns 8.8.8.8\
        -v $SITES$2/www:/var/www\
        -v /mnt/sda/lib/$2/mysql:/var/lib/mysql\
       $IMAGE /opt/install_db.sh"
    else
      PARAMS="run --rm -t -i -p 10900:80 -p 10901:22 --dns 8.8.8.8\
        -v $SITES$2/www:/var/www\
        -v $SITES$2/mysql:/var/lib/mysql\
       $IMAGE /opt/install_db.sh"
    fi

    docker $PARAMS
  fi
}

function docker_cleanup(){
  echo "This will kill all active containers, and remove all containers afterwards..."
  read -r -p "Are you sure? [y/N] " RESPONSE
  case $RESPONSE in
    [yY][eE][sS]|[yY] )
      # Kill all containers.
      docker ps -a -q | xargs docker kill
      echo "..."
      # Remove all containers.
      docker ps -a -q | xargs docker rm
      echo "... Done!"
      ;;
    *)
      exit
      ;;
  esac
}

case $1 in
  up) kran_logo; init; start;;
  build) kran_logo; build;;
  ssh) init; connect_ssh $@;;
  scp) init; copy_ssh $@;;
  init-site | i) initalize_site $@;;
  clean) docker_cleanup;;
  params) print_params;;
  *) kran_logo; kran_usage; exit 1;
esac
